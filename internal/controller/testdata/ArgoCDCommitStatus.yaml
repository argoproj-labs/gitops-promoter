apiVersion: promoter.argoproj.io/v1alpha1
kind: ArgoCDCommitStatus
metadata:
  name: argocdcommitstatus-sample
spec:
  applicationSelector:
    matchLabels:
      app: demo
  promotionStrategyRef:
    name: argocon-demo
  url:
    template: |
      {{- $baseURL := "https://dev.argocd.local" -}}
      {{- if eq .Environment "environment/development" -}}
      {{- $baseURL = "https://dev.argocd.local" -}}
      {{- else if eq .Environment "environment/staging" -}}
      {{- $baseURL = "https://staging.argocd.local" -}}
      {{- else if eq .Environment "environment/production" -}}
      {{- $baseURL = "https://prod.argocd.local" -}}
      {{- end -}}
      {{- $labels := "" -}}
      {{- range $key, $value := .ArgoCDCommitStatus.Spec.ApplicationSelector.MatchLabels -}}
      {{- $labels = printf "%s%s=%s," $labels $key $value -}}
      {{- end -}}
      {{- printf "%s/applications?labels=%s" $baseURL (urlQueryEscape $labels) -}}
    options:
      - missingkey=zero
status:
  conditions:
    # The Ready condition indicates that the resource has been successfully reconciled, when there is an error during
    # reconciliation, the condition will be False with a reason of ReconciliationError. When we successfully reconcile the resource,
    # the condition will be True with a reason of ReconciliationSuccess. The Ready condition is essentially a way to show reconciliation
    # errors to the user. This condition exists on all resources that have reconciliation logic.
    - type: Ready
      lastTransitionTime: 2023-10-01T00:00:00Z
      message: Reconciliation succeeded
      reason: ReconciliationSuccess # ReconciliationSuccess or ReconciliationError
      status: "True" # "True," "False," or "Unknown"
      # observedGeneration is the generation of the resource that was last reconciled. This is used to track if the
      # resource has changed since the last reconciliation.
      observedGeneration: 123
  # applicationsSelected is a list of applications that match the applicationSelector.
  applicationsSelected:
    - environment: environments/dev
      name: example-app-name
      namespace: example-app-namespace
      phase: success # pending, success, or failure
      sha: abcdef1234567890abcdef1234567890abcdef12
      clusterName: "" # an empty cluster name means "local cluster"
    - environment: environments/prod
      name: example-app-name
      namespace: example-app-namespace
      phase: success # pending, success, or failure
      sha: abcdef1234567890abcdef1234567890abcdef12
      clusterName: "prod"
