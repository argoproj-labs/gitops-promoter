---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.19.0
  name: controllerconfigurations.promoter.argoproj.io
spec:
  group: promoter.argoproj.io
  names:
    kind: ControllerConfiguration
    listKind: ControllerConfigurationList
    plural: controllerconfigurations
    singular: controllerconfiguration
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ControllerConfiguration is the Schema for the controllerconfigurations
          API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              ControllerConfigurationSpec defines the desired state of ControllerConfiguration.

              This spec contains the global configuration for all controllers in the promoter system.
              Each controller has its own configuration section that specifies WorkQueue settings,
              rate limiters, and other controller-specific parameters. All fields should be required,
              with defaults set in manifests rather than in code.
            properties:
              argocdCommitStatus:
                description: |-
                  ArgoCDCommitStatus contains the configuration for the ArgoCDCommitStatus controller,
                  including WorkQueue settings that control reconciliation behavior.
                properties:
                  watchLocalApplications:
                    default: true
                    description: |-
                      WatchLocalApplications controls whether the controller monitors Argo CD Applications
                      in the local cluster. When false, the controller will only watch Applications in remote clusters
                      configured via kubeconfig secrets. This is useful when the Argo CD Application CRD is not installed
                      in the local cluster or when all Applications are deployed to remote clusters.
                    type: boolean
                  workQueue:
                    description: |-
                      WorkQueue contains the work queue configuration for the ArgoCDCommitStatus controller.
                      This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.
                    properties:
                      maxConcurrentReconciles:
                        description: |-
                          MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
                          that can run for this controller. Higher values increase throughput but consume more
                          resources. Must be at least 1.
                        type: integer
                      rateLimiter:
                        description: |-
                          RateLimiter defines the rate limiting strategy for the controller's work queue.
                          Rate limiting controls how quickly failed reconciliations are retried and helps
                          prevent overwhelming external APIs or systems.
                        properties:
                          bucket:
                            description: |-
                              Bucket rate limiter uses a token bucket algorithm to control request rate.
                              Allows bursts while maintaining an average rate limit.
                            properties:
                              bucket:
                                description: |-
                                  Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                  This defines the maximum burst size - how many operations can occur in rapid
                                  succession before rate limiting takes effect. Must be non-negative.
                                type: integer
                              qps:
                                description: |-
                                  Qps (queries per second) is the rate at which tokens are added to the bucket.
                                  This defines the sustained rate limit for operations. Must be non-negative.
                                type: integer
                            required:
                            - bucket
                            - qps
                            type: object
                          exponentialFailure:
                            description: |-
                              ExponentialFailure rate limiter increases delay exponentially with each failure.
                              Standard approach for backing off when operations fail repeatedly.
                            properties:
                              baseDelay:
                                description: |-
                                  BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                  increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                  Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                type: string
                              maxDelay:
                                description: |-
                                  MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                  this value, all subsequent retries will use this delay.
                                  Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                type: string
                            required:
                            - baseDelay
                            - maxDelay
                            type: object
                          fastSlow:
                            description: |-
                              FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                              Useful for quickly retrying transient errors while backing off for persistent failures.
                            properties:
                              fastDelay:
                                description: |-
                                  FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                  Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                type: string
                              maxFastAttempts:
                                description: |-
                                  MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                  Must be at least 1.
                                type: integer
                              slowDelay:
                                description: |-
                                  SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                  Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                type: string
                            required:
                            - fastDelay
                            - maxFastAttempts
                            - slowDelay
                            type: object
                          maxOf:
                            description: |-
                              MaxOf allows combining multiple rate limiters, where the maximum delay from all
                              limiters is used. This enables sophisticated rate limiting that respects multiple
                              constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
                            items:
                              description: |-
                                RateLimiterTypes defines the different algorithms available for rate limiting.

                                Exactly one of the three rate limiter types must be specified:
                                  - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
                                  - ExponentialFailure: Standard exponential backoff for repeated failures
                                  - Bucket: Token bucket algorithm for controlling overall request rate

                                See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.
                              properties:
                                bucket:
                                  description: |-
                                    Bucket rate limiter uses a token bucket algorithm to control request rate.
                                    Allows bursts while maintaining an average rate limit.
                                  properties:
                                    bucket:
                                      description: |-
                                        Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                        This defines the maximum burst size - how many operations can occur in rapid
                                        succession before rate limiting takes effect. Must be non-negative.
                                      type: integer
                                    qps:
                                      description: |-
                                        Qps (queries per second) is the rate at which tokens are added to the bucket.
                                        This defines the sustained rate limit for operations. Must be non-negative.
                                      type: integer
                                  required:
                                  - bucket
                                  - qps
                                  type: object
                                exponentialFailure:
                                  description: |-
                                    ExponentialFailure rate limiter increases delay exponentially with each failure.
                                    Standard approach for backing off when operations fail repeatedly.
                                  properties:
                                    baseDelay:
                                      description: |-
                                        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                      type: string
                                    maxDelay:
                                      description: |-
                                        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                        this value, all subsequent retries will use this delay.
                                        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                      type: string
                                  required:
                                  - baseDelay
                                  - maxDelay
                                  type: object
                                fastSlow:
                                  description: |-
                                    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                    Useful for quickly retrying transient errors while backing off for persistent failures.
                                  properties:
                                    fastDelay:
                                      description: |-
                                        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                      type: string
                                    maxFastAttempts:
                                      description: |-
                                        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                        Must be at least 1.
                                      type: integer
                                    slowDelay:
                                      description: |-
                                        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                      type: string
                                  required:
                                  - fastDelay
                                  - maxFastAttempts
                                  - slowDelay
                                  type: object
                              type: object
                              x-kubernetes-validations:
                              - message: at most one of the fields in [fastSlow exponentialFailure
                                  bucket] may be set
                                rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                                  <= 1'
                            maxItems: 3
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket maxOf] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket),has(self.maxOf)].filter(x,x==true).size()
                            <= 1'
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                            <= 1'
                      requeueDuration:
                        description: |-
                          RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
                          This creates a periodic reconciliation loop that ensures the desired state is maintained even
                          without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
                        type: string
                    required:
                    - maxConcurrentReconciles
                    - rateLimiter
                    - requeueDuration
                    type: object
                required:
                - watchLocalApplications
                - workQueue
                type: object
              changeTransferPolicy:
                description: |-
                  ChangeTransferPolicy contains the configuration for the ChangeTransferPolicy controller,
                  including WorkQueue settings that control reconciliation behavior.
                properties:
                  workQueue:
                    description: |-
                      WorkQueue contains the work queue configuration for the ChangeTransferPolicy controller.
                      This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.
                    properties:
                      maxConcurrentReconciles:
                        description: |-
                          MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
                          that can run for this controller. Higher values increase throughput but consume more
                          resources. Must be at least 1.
                        type: integer
                      rateLimiter:
                        description: |-
                          RateLimiter defines the rate limiting strategy for the controller's work queue.
                          Rate limiting controls how quickly failed reconciliations are retried and helps
                          prevent overwhelming external APIs or systems.
                        properties:
                          bucket:
                            description: |-
                              Bucket rate limiter uses a token bucket algorithm to control request rate.
                              Allows bursts while maintaining an average rate limit.
                            properties:
                              bucket:
                                description: |-
                                  Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                  This defines the maximum burst size - how many operations can occur in rapid
                                  succession before rate limiting takes effect. Must be non-negative.
                                type: integer
                              qps:
                                description: |-
                                  Qps (queries per second) is the rate at which tokens are added to the bucket.
                                  This defines the sustained rate limit for operations. Must be non-negative.
                                type: integer
                            required:
                            - bucket
                            - qps
                            type: object
                          exponentialFailure:
                            description: |-
                              ExponentialFailure rate limiter increases delay exponentially with each failure.
                              Standard approach for backing off when operations fail repeatedly.
                            properties:
                              baseDelay:
                                description: |-
                                  BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                  increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                  Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                type: string
                              maxDelay:
                                description: |-
                                  MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                  this value, all subsequent retries will use this delay.
                                  Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                type: string
                            required:
                            - baseDelay
                            - maxDelay
                            type: object
                          fastSlow:
                            description: |-
                              FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                              Useful for quickly retrying transient errors while backing off for persistent failures.
                            properties:
                              fastDelay:
                                description: |-
                                  FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                  Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                type: string
                              maxFastAttempts:
                                description: |-
                                  MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                  Must be at least 1.
                                type: integer
                              slowDelay:
                                description: |-
                                  SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                  Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                type: string
                            required:
                            - fastDelay
                            - maxFastAttempts
                            - slowDelay
                            type: object
                          maxOf:
                            description: |-
                              MaxOf allows combining multiple rate limiters, where the maximum delay from all
                              limiters is used. This enables sophisticated rate limiting that respects multiple
                              constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
                            items:
                              description: |-
                                RateLimiterTypes defines the different algorithms available for rate limiting.

                                Exactly one of the three rate limiter types must be specified:
                                  - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
                                  - ExponentialFailure: Standard exponential backoff for repeated failures
                                  - Bucket: Token bucket algorithm for controlling overall request rate

                                See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.
                              properties:
                                bucket:
                                  description: |-
                                    Bucket rate limiter uses a token bucket algorithm to control request rate.
                                    Allows bursts while maintaining an average rate limit.
                                  properties:
                                    bucket:
                                      description: |-
                                        Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                        This defines the maximum burst size - how many operations can occur in rapid
                                        succession before rate limiting takes effect. Must be non-negative.
                                      type: integer
                                    qps:
                                      description: |-
                                        Qps (queries per second) is the rate at which tokens are added to the bucket.
                                        This defines the sustained rate limit for operations. Must be non-negative.
                                      type: integer
                                  required:
                                  - bucket
                                  - qps
                                  type: object
                                exponentialFailure:
                                  description: |-
                                    ExponentialFailure rate limiter increases delay exponentially with each failure.
                                    Standard approach for backing off when operations fail repeatedly.
                                  properties:
                                    baseDelay:
                                      description: |-
                                        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                      type: string
                                    maxDelay:
                                      description: |-
                                        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                        this value, all subsequent retries will use this delay.
                                        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                      type: string
                                  required:
                                  - baseDelay
                                  - maxDelay
                                  type: object
                                fastSlow:
                                  description: |-
                                    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                    Useful for quickly retrying transient errors while backing off for persistent failures.
                                  properties:
                                    fastDelay:
                                      description: |-
                                        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                      type: string
                                    maxFastAttempts:
                                      description: |-
                                        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                        Must be at least 1.
                                      type: integer
                                    slowDelay:
                                      description: |-
                                        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                      type: string
                                  required:
                                  - fastDelay
                                  - maxFastAttempts
                                  - slowDelay
                                  type: object
                              type: object
                              x-kubernetes-validations:
                              - message: at most one of the fields in [fastSlow exponentialFailure
                                  bucket] may be set
                                rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                                  <= 1'
                            maxItems: 3
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket maxOf] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket),has(self.maxOf)].filter(x,x==true).size()
                            <= 1'
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                            <= 1'
                      requeueDuration:
                        description: |-
                          RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
                          This creates a periodic reconciliation loop that ensures the desired state is maintained even
                          without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
                        type: string
                    required:
                    - maxConcurrentReconciles
                    - rateLimiter
                    - requeueDuration
                    type: object
                required:
                - workQueue
                type: object
              commitStatus:
                description: |-
                  CommitStatus contains the configuration for the CommitStatus controller,
                  including WorkQueue settings that control reconciliation behavior.
                properties:
                  workQueue:
                    description: |-
                      WorkQueue contains the work queue configuration for the CommitStatus controller.
                      This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.
                    properties:
                      maxConcurrentReconciles:
                        description: |-
                          MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
                          that can run for this controller. Higher values increase throughput but consume more
                          resources. Must be at least 1.
                        type: integer
                      rateLimiter:
                        description: |-
                          RateLimiter defines the rate limiting strategy for the controller's work queue.
                          Rate limiting controls how quickly failed reconciliations are retried and helps
                          prevent overwhelming external APIs or systems.
                        properties:
                          bucket:
                            description: |-
                              Bucket rate limiter uses a token bucket algorithm to control request rate.
                              Allows bursts while maintaining an average rate limit.
                            properties:
                              bucket:
                                description: |-
                                  Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                  This defines the maximum burst size - how many operations can occur in rapid
                                  succession before rate limiting takes effect. Must be non-negative.
                                type: integer
                              qps:
                                description: |-
                                  Qps (queries per second) is the rate at which tokens are added to the bucket.
                                  This defines the sustained rate limit for operations. Must be non-negative.
                                type: integer
                            required:
                            - bucket
                            - qps
                            type: object
                          exponentialFailure:
                            description: |-
                              ExponentialFailure rate limiter increases delay exponentially with each failure.
                              Standard approach for backing off when operations fail repeatedly.
                            properties:
                              baseDelay:
                                description: |-
                                  BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                  increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                  Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                type: string
                              maxDelay:
                                description: |-
                                  MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                  this value, all subsequent retries will use this delay.
                                  Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                type: string
                            required:
                            - baseDelay
                            - maxDelay
                            type: object
                          fastSlow:
                            description: |-
                              FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                              Useful for quickly retrying transient errors while backing off for persistent failures.
                            properties:
                              fastDelay:
                                description: |-
                                  FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                  Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                type: string
                              maxFastAttempts:
                                description: |-
                                  MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                  Must be at least 1.
                                type: integer
                              slowDelay:
                                description: |-
                                  SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                  Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                type: string
                            required:
                            - fastDelay
                            - maxFastAttempts
                            - slowDelay
                            type: object
                          maxOf:
                            description: |-
                              MaxOf allows combining multiple rate limiters, where the maximum delay from all
                              limiters is used. This enables sophisticated rate limiting that respects multiple
                              constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
                            items:
                              description: |-
                                RateLimiterTypes defines the different algorithms available for rate limiting.

                                Exactly one of the three rate limiter types must be specified:
                                  - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
                                  - ExponentialFailure: Standard exponential backoff for repeated failures
                                  - Bucket: Token bucket algorithm for controlling overall request rate

                                See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.
                              properties:
                                bucket:
                                  description: |-
                                    Bucket rate limiter uses a token bucket algorithm to control request rate.
                                    Allows bursts while maintaining an average rate limit.
                                  properties:
                                    bucket:
                                      description: |-
                                        Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                        This defines the maximum burst size - how many operations can occur in rapid
                                        succession before rate limiting takes effect. Must be non-negative.
                                      type: integer
                                    qps:
                                      description: |-
                                        Qps (queries per second) is the rate at which tokens are added to the bucket.
                                        This defines the sustained rate limit for operations. Must be non-negative.
                                      type: integer
                                  required:
                                  - bucket
                                  - qps
                                  type: object
                                exponentialFailure:
                                  description: |-
                                    ExponentialFailure rate limiter increases delay exponentially with each failure.
                                    Standard approach for backing off when operations fail repeatedly.
                                  properties:
                                    baseDelay:
                                      description: |-
                                        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                      type: string
                                    maxDelay:
                                      description: |-
                                        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                        this value, all subsequent retries will use this delay.
                                        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                      type: string
                                  required:
                                  - baseDelay
                                  - maxDelay
                                  type: object
                                fastSlow:
                                  description: |-
                                    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                    Useful for quickly retrying transient errors while backing off for persistent failures.
                                  properties:
                                    fastDelay:
                                      description: |-
                                        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                      type: string
                                    maxFastAttempts:
                                      description: |-
                                        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                        Must be at least 1.
                                      type: integer
                                    slowDelay:
                                      description: |-
                                        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                      type: string
                                  required:
                                  - fastDelay
                                  - maxFastAttempts
                                  - slowDelay
                                  type: object
                              type: object
                              x-kubernetes-validations:
                              - message: at most one of the fields in [fastSlow exponentialFailure
                                  bucket] may be set
                                rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                                  <= 1'
                            maxItems: 3
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket maxOf] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket),has(self.maxOf)].filter(x,x==true).size()
                            <= 1'
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                            <= 1'
                      requeueDuration:
                        description: |-
                          RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
                          This creates a periodic reconciliation loop that ensures the desired state is maintained even
                          without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
                        type: string
                    required:
                    - maxConcurrentReconciles
                    - rateLimiter
                    - requeueDuration
                    type: object
                required:
                - workQueue
                type: object
              promotionStrategy:
                description: |-
                  PromotionStrategy contains the configuration for the PromotionStrategy controller,
                  including WorkQueue settings that control reconciliation behavior.
                properties:
                  workQueue:
                    description: |-
                      WorkQueue contains the work queue configuration for the PromotionStrategy controller.
                      This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.
                    properties:
                      maxConcurrentReconciles:
                        description: |-
                          MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
                          that can run for this controller. Higher values increase throughput but consume more
                          resources. Must be at least 1.
                        type: integer
                      rateLimiter:
                        description: |-
                          RateLimiter defines the rate limiting strategy for the controller's work queue.
                          Rate limiting controls how quickly failed reconciliations are retried and helps
                          prevent overwhelming external APIs or systems.
                        properties:
                          bucket:
                            description: |-
                              Bucket rate limiter uses a token bucket algorithm to control request rate.
                              Allows bursts while maintaining an average rate limit.
                            properties:
                              bucket:
                                description: |-
                                  Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                  This defines the maximum burst size - how many operations can occur in rapid
                                  succession before rate limiting takes effect. Must be non-negative.
                                type: integer
                              qps:
                                description: |-
                                  Qps (queries per second) is the rate at which tokens are added to the bucket.
                                  This defines the sustained rate limit for operations. Must be non-negative.
                                type: integer
                            required:
                            - bucket
                            - qps
                            type: object
                          exponentialFailure:
                            description: |-
                              ExponentialFailure rate limiter increases delay exponentially with each failure.
                              Standard approach for backing off when operations fail repeatedly.
                            properties:
                              baseDelay:
                                description: |-
                                  BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                  increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                  Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                type: string
                              maxDelay:
                                description: |-
                                  MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                  this value, all subsequent retries will use this delay.
                                  Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                type: string
                            required:
                            - baseDelay
                            - maxDelay
                            type: object
                          fastSlow:
                            description: |-
                              FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                              Useful for quickly retrying transient errors while backing off for persistent failures.
                            properties:
                              fastDelay:
                                description: |-
                                  FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                  Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                type: string
                              maxFastAttempts:
                                description: |-
                                  MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                  Must be at least 1.
                                type: integer
                              slowDelay:
                                description: |-
                                  SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                  Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                type: string
                            required:
                            - fastDelay
                            - maxFastAttempts
                            - slowDelay
                            type: object
                          maxOf:
                            description: |-
                              MaxOf allows combining multiple rate limiters, where the maximum delay from all
                              limiters is used. This enables sophisticated rate limiting that respects multiple
                              constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
                            items:
                              description: |-
                                RateLimiterTypes defines the different algorithms available for rate limiting.

                                Exactly one of the three rate limiter types must be specified:
                                  - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
                                  - ExponentialFailure: Standard exponential backoff for repeated failures
                                  - Bucket: Token bucket algorithm for controlling overall request rate

                                See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.
                              properties:
                                bucket:
                                  description: |-
                                    Bucket rate limiter uses a token bucket algorithm to control request rate.
                                    Allows bursts while maintaining an average rate limit.
                                  properties:
                                    bucket:
                                      description: |-
                                        Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                        This defines the maximum burst size - how many operations can occur in rapid
                                        succession before rate limiting takes effect. Must be non-negative.
                                      type: integer
                                    qps:
                                      description: |-
                                        Qps (queries per second) is the rate at which tokens are added to the bucket.
                                        This defines the sustained rate limit for operations. Must be non-negative.
                                      type: integer
                                  required:
                                  - bucket
                                  - qps
                                  type: object
                                exponentialFailure:
                                  description: |-
                                    ExponentialFailure rate limiter increases delay exponentially with each failure.
                                    Standard approach for backing off when operations fail repeatedly.
                                  properties:
                                    baseDelay:
                                      description: |-
                                        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                      type: string
                                    maxDelay:
                                      description: |-
                                        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                        this value, all subsequent retries will use this delay.
                                        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                      type: string
                                  required:
                                  - baseDelay
                                  - maxDelay
                                  type: object
                                fastSlow:
                                  description: |-
                                    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                    Useful for quickly retrying transient errors while backing off for persistent failures.
                                  properties:
                                    fastDelay:
                                      description: |-
                                        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                      type: string
                                    maxFastAttempts:
                                      description: |-
                                        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                        Must be at least 1.
                                      type: integer
                                    slowDelay:
                                      description: |-
                                        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                      type: string
                                  required:
                                  - fastDelay
                                  - maxFastAttempts
                                  - slowDelay
                                  type: object
                              type: object
                              x-kubernetes-validations:
                              - message: at most one of the fields in [fastSlow exponentialFailure
                                  bucket] may be set
                                rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                                  <= 1'
                            maxItems: 3
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket maxOf] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket),has(self.maxOf)].filter(x,x==true).size()
                            <= 1'
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                            <= 1'
                      requeueDuration:
                        description: |-
                          RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
                          This creates a periodic reconciliation loop that ensures the desired state is maintained even
                          without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
                        type: string
                    required:
                    - maxConcurrentReconciles
                    - rateLimiter
                    - requeueDuration
                    type: object
                required:
                - workQueue
                type: object
              pullRequest:
                description: |-
                  PullRequest contains the configuration for the PullRequest controller,
                  including WorkQueue settings and pull request template configuration.
                properties:
                  template:
                    description: |-
                      Template is the template configuration used to generate pull request titles and descriptions.
                      Uses Go template syntax with Sprig functions available.
                    properties:
                      description:
                        description: |-
                          Description is the template used to generate the body/description of the pull request.
                          Uses Go template syntax with Sprig functions available for string manipulation.
                        type: string
                      title:
                        description: |-
                          Title is the template used to generate the title of the pull request.
                          Uses Go template syntax with Sprig functions available for string manipulation.
                        type: string
                    required:
                    - description
                    - title
                    type: object
                  workQueue:
                    description: |-
                      WorkQueue contains the work queue configuration for the PullRequest controller.
                      This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.
                    properties:
                      maxConcurrentReconciles:
                        description: |-
                          MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
                          that can run for this controller. Higher values increase throughput but consume more
                          resources. Must be at least 1.
                        type: integer
                      rateLimiter:
                        description: |-
                          RateLimiter defines the rate limiting strategy for the controller's work queue.
                          Rate limiting controls how quickly failed reconciliations are retried and helps
                          prevent overwhelming external APIs or systems.
                        properties:
                          bucket:
                            description: |-
                              Bucket rate limiter uses a token bucket algorithm to control request rate.
                              Allows bursts while maintaining an average rate limit.
                            properties:
                              bucket:
                                description: |-
                                  Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                  This defines the maximum burst size - how many operations can occur in rapid
                                  succession before rate limiting takes effect. Must be non-negative.
                                type: integer
                              qps:
                                description: |-
                                  Qps (queries per second) is the rate at which tokens are added to the bucket.
                                  This defines the sustained rate limit for operations. Must be non-negative.
                                type: integer
                            required:
                            - bucket
                            - qps
                            type: object
                          exponentialFailure:
                            description: |-
                              ExponentialFailure rate limiter increases delay exponentially with each failure.
                              Standard approach for backing off when operations fail repeatedly.
                            properties:
                              baseDelay:
                                description: |-
                                  BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                  increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                  Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                type: string
                              maxDelay:
                                description: |-
                                  MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                  this value, all subsequent retries will use this delay.
                                  Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                type: string
                            required:
                            - baseDelay
                            - maxDelay
                            type: object
                          fastSlow:
                            description: |-
                              FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                              Useful for quickly retrying transient errors while backing off for persistent failures.
                            properties:
                              fastDelay:
                                description: |-
                                  FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                  Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                type: string
                              maxFastAttempts:
                                description: |-
                                  MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                  Must be at least 1.
                                type: integer
                              slowDelay:
                                description: |-
                                  SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                  Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                type: string
                            required:
                            - fastDelay
                            - maxFastAttempts
                            - slowDelay
                            type: object
                          maxOf:
                            description: |-
                              MaxOf allows combining multiple rate limiters, where the maximum delay from all
                              limiters is used. This enables sophisticated rate limiting that respects multiple
                              constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
                            items:
                              description: |-
                                RateLimiterTypes defines the different algorithms available for rate limiting.

                                Exactly one of the three rate limiter types must be specified:
                                  - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
                                  - ExponentialFailure: Standard exponential backoff for repeated failures
                                  - Bucket: Token bucket algorithm for controlling overall request rate

                                See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.
                              properties:
                                bucket:
                                  description: |-
                                    Bucket rate limiter uses a token bucket algorithm to control request rate.
                                    Allows bursts while maintaining an average rate limit.
                                  properties:
                                    bucket:
                                      description: |-
                                        Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                        This defines the maximum burst size - how many operations can occur in rapid
                                        succession before rate limiting takes effect. Must be non-negative.
                                      type: integer
                                    qps:
                                      description: |-
                                        Qps (queries per second) is the rate at which tokens are added to the bucket.
                                        This defines the sustained rate limit for operations. Must be non-negative.
                                      type: integer
                                  required:
                                  - bucket
                                  - qps
                                  type: object
                                exponentialFailure:
                                  description: |-
                                    ExponentialFailure rate limiter increases delay exponentially with each failure.
                                    Standard approach for backing off when operations fail repeatedly.
                                  properties:
                                    baseDelay:
                                      description: |-
                                        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                      type: string
                                    maxDelay:
                                      description: |-
                                        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                        this value, all subsequent retries will use this delay.
                                        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                      type: string
                                  required:
                                  - baseDelay
                                  - maxDelay
                                  type: object
                                fastSlow:
                                  description: |-
                                    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                    Useful for quickly retrying transient errors while backing off for persistent failures.
                                  properties:
                                    fastDelay:
                                      description: |-
                                        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                      type: string
                                    maxFastAttempts:
                                      description: |-
                                        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                        Must be at least 1.
                                      type: integer
                                    slowDelay:
                                      description: |-
                                        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                      type: string
                                  required:
                                  - fastDelay
                                  - maxFastAttempts
                                  - slowDelay
                                  type: object
                              type: object
                              x-kubernetes-validations:
                              - message: at most one of the fields in [fastSlow exponentialFailure
                                  bucket] may be set
                                rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                                  <= 1'
                            maxItems: 3
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket maxOf] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket),has(self.maxOf)].filter(x,x==true).size()
                            <= 1'
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                            <= 1'
                      requeueDuration:
                        description: |-
                          RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
                          This creates a periodic reconciliation loop that ensures the desired state is maintained even
                          without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
                        type: string
                    required:
                    - maxConcurrentReconciles
                    - rateLimiter
                    - requeueDuration
                    type: object
                required:
                - template
                - workQueue
                type: object
              timedCommitStatus:
                description: |-
                  TimedCommitStatus contains the configuration for the TimedCommitStatus controller,
                  including WorkQueue settings that control reconciliation behavior.
                properties:
                  workQueue:
                    description: |-
                      WorkQueue contains the work queue configuration for the TimedCommitStatus controller.
                      This includes requeue duration, maximum concurrent reconciles, and rate limiter settings.
                    properties:
                      maxConcurrentReconciles:
                        description: |-
                          MaxConcurrentReconciles defines the maximum number of concurrent reconcile operations
                          that can run for this controller. Higher values increase throughput but consume more
                          resources. Must be at least 1.
                        type: integer
                      rateLimiter:
                        description: |-
                          RateLimiter defines the rate limiting strategy for the controller's work queue.
                          Rate limiting controls how quickly failed reconciliations are retried and helps
                          prevent overwhelming external APIs or systems.
                        properties:
                          bucket:
                            description: |-
                              Bucket rate limiter uses a token bucket algorithm to control request rate.
                              Allows bursts while maintaining an average rate limit.
                            properties:
                              bucket:
                                description: |-
                                  Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                  This defines the maximum burst size - how many operations can occur in rapid
                                  succession before rate limiting takes effect. Must be non-negative.
                                type: integer
                              qps:
                                description: |-
                                  Qps (queries per second) is the rate at which tokens are added to the bucket.
                                  This defines the sustained rate limit for operations. Must be non-negative.
                                type: integer
                            required:
                            - bucket
                            - qps
                            type: object
                          exponentialFailure:
                            description: |-
                              ExponentialFailure rate limiter increases delay exponentially with each failure.
                              Standard approach for backing off when operations fail repeatedly.
                            properties:
                              baseDelay:
                                description: |-
                                  BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                  increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                  Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                type: string
                              maxDelay:
                                description: |-
                                  MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                  this value, all subsequent retries will use this delay.
                                  Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                type: string
                            required:
                            - baseDelay
                            - maxDelay
                            type: object
                          fastSlow:
                            description: |-
                              FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                              Useful for quickly retrying transient errors while backing off for persistent failures.
                            properties:
                              fastDelay:
                                description: |-
                                  FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                  Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                type: string
                              maxFastAttempts:
                                description: |-
                                  MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                  Must be at least 1.
                                type: integer
                              slowDelay:
                                description: |-
                                  SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                  Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                type: string
                            required:
                            - fastDelay
                            - maxFastAttempts
                            - slowDelay
                            type: object
                          maxOf:
                            description: |-
                              MaxOf allows combining multiple rate limiters, where the maximum delay from all
                              limiters is used. This enables sophisticated rate limiting that respects multiple
                              constraints simultaneously (e.g., both per-item exponential backoff and global rate limits).
                            items:
                              description: |-
                                RateLimiterTypes defines the different algorithms available for rate limiting.

                                Exactly one of the three rate limiter types must be specified:
                                  - FastSlow: Quick retry for transient errors, then slower retry for persistent failures
                                  - ExponentialFailure: Standard exponential backoff for repeated failures
                                  - Bucket: Token bucket algorithm for controlling overall request rate

                                See https://pkg.go.dev/k8s.io/client-go/util/workqueue for implementation details.
                              properties:
                                bucket:
                                  description: |-
                                    Bucket rate limiter uses a token bucket algorithm to control request rate.
                                    Allows bursts while maintaining an average rate limit.
                                  properties:
                                    bucket:
                                      description: |-
                                        Bucket is the maximum number of tokens that can be accumulated in the bucket.
                                        This defines the maximum burst size - how many operations can occur in rapid
                                        succession before rate limiting takes effect. Must be non-negative.
                                      type: integer
                                    qps:
                                      description: |-
                                        Qps (queries per second) is the rate at which tokens are added to the bucket.
                                        This defines the sustained rate limit for operations. Must be non-negative.
                                      type: integer
                                  required:
                                  - bucket
                                  - qps
                                  type: object
                                exponentialFailure:
                                  description: |-
                                    ExponentialFailure rate limiter increases delay exponentially with each failure.
                                    Standard approach for backing off when operations fail repeatedly.
                                  properties:
                                    baseDelay:
                                      description: |-
                                        BaseDelay is the initial delay after the first failure. Subsequent failures will exponentially
                                        increase this delay (2x, 4x, 8x, etc.) until MaxDelay is reached.
                                        Format follows Go's time.Duration syntax (e.g., "1s" for 1 second).
                                      type: string
                                    maxDelay:
                                      description: |-
                                        MaxDelay is the maximum delay between retry attempts. Once the exponential backoff reaches
                                        this value, all subsequent retries will use this delay.
                                        Format follows Go's time.Duration syntax (e.g., "1m" for 1 minute).
                                      type: string
                                  required:
                                  - baseDelay
                                  - maxDelay
                                  type: object
                                fastSlow:
                                  description: |-
                                    FastSlow rate limiter provides fast retries initially, then switches to slow retries.
                                    Useful for quickly retrying transient errors while backing off for persistent failures.
                                  properties:
                                    fastDelay:
                                      description: |-
                                        FastDelay is the delay used for the first MaxFastAttempts retry attempts.
                                        Format follows Go's time.Duration syntax (e.g., "100ms" for 100 milliseconds).
                                      type: string
                                    maxFastAttempts:
                                      description: |-
                                        MaxFastAttempts is the number of retry attempts that use FastDelay before switching to SlowDelay.
                                        Must be at least 1.
                                      type: integer
                                    slowDelay:
                                      description: |-
                                        SlowDelay is the delay used for retry attempts after MaxFastAttempts have been exhausted.
                                        Format follows Go's time.Duration syntax (e.g., "10s" for 10 seconds).
                                      type: string
                                  required:
                                  - fastDelay
                                  - maxFastAttempts
                                  - slowDelay
                                  type: object
                              type: object
                              x-kubernetes-validations:
                              - message: at most one of the fields in [fastSlow exponentialFailure
                                  bucket] may be set
                                rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                                  <= 1'
                            maxItems: 3
                            type: array
                        type: object
                        x-kubernetes-validations:
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket maxOf] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket),has(self.maxOf)].filter(x,x==true).size()
                            <= 1'
                        - message: at most one of the fields in [fastSlow exponentialFailure
                            bucket] may be set
                          rule: '[has(self.fastSlow),has(self.exponentialFailure),has(self.bucket)].filter(x,x==true).size()
                            <= 1'
                      requeueDuration:
                        description: |-
                          RequeueDuration specifies how frequently resources should be requeued for automatic reconciliation.
                          This creates a periodic reconciliation loop that ensures the desired state is maintained even
                          without external triggers. Format follows Go's time.Duration syntax (e.g., "5m" for 5 minutes).
                        type: string
                    required:
                    - maxConcurrentReconciles
                    - rateLimiter
                    - requeueDuration
                    type: object
                required:
                - workQueue
                type: object
            required:
            - argocdCommitStatus
            - changeTransferPolicy
            - commitStatus
            - promotionStrategy
            - pullRequest
            - timedCommitStatus
            type: object
          status:
            description: |-
              ControllerConfigurationStatus defines the observed state of ControllerConfiguration.

              Currently, this resource does not maintain any status information as it is a configuration-only
              resource. Status fields may be added in the future to track configuration validation or
              controller health metrics.
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
